// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------
@forward 'variables';
@use 'variables' as v;
@use 'sass:map';
@use "../themes/dark-theme.scss" as dark;
@use "../themes/light-theme.scss" as light;
@use 'sass:color';

@mixin pargin($val) {
  margin: $val;
  padding: $val;
}

$_breakpoints: (
  "extra-small": (
    max-width: 600px,
  ),
  "small": (
    min-width: 600px,
  ),
  "medium": (
    min-width: 768px,
  ),
  "large": (
    min-width: 992px,
  ),
  "extra-large": (
    min-width: 1200px,
  ),
) !default;

@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($_breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media only screen and #{inspect(map-get($_breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin _stroke($color, $shadow: 1px) {
  // $color: v.try-map-get(light.$theme, $color);
  $size: 1px;
  $blur: 0;
  text-shadow: $shadow $shadow $blur $color, $size * -1 $size * -1 $blur $color,
    $size $size * -1 $blur $color, $size * -1 $size $blur $color,
    $size $size $blur $color;
}

@mixin theme-stroke($key, $shadow: 0px) {
  @if $key == "lightText" {
    $val: v.try-map-get(dark.$theme, v.$bodyText);
    @include _stroke($val, $shadow);
  } @else if $key == "darkText" {
    $val: v.try-map-get(light.$theme, v.$bodyText);
    @include _stroke($val, $shadow);
  } @else {
    $val: v.try-map-get(light.$theme, $key);
    @include _stroke($val, $shadow);
    @media (prefers-color-scheme: dark) {
      $val: v.try-map-get(dark.$theme, $key);
      @include _stroke($val, $shadow);
    }
  }
}

// @mixin themeProperty(
//   $theme,
//   $property,
//   $color,
//   $additionalPropertiesPositionIsFront,
//   $additionalProperties,
//   $important: false
// ) {
//   $imp: "";
//   @if ($important and ($additionalProperties != "!important")) {
//     $imp: "!important";
//   }
//   $color-val: "";
//   @if map-has-key($theme, $color) {
//     $color-val: map-get($theme, $color);
//   }
//   // If the key doesn't exist in the map
//   @else {
//     @warn "No value found for `#{$color}`. "
//         + "Available colors are: #{map-keys($theme)}.";
//   }
//   @if $additionalPropertiesPositionIsFront {
//     #{$property}: unquote(
//       $additionalProperties + " " + map-get($theme, $color) + " " + $imp
//     );
//   } @else {
//     #{$property}: unquote(
//       map-get($theme, $color) + " " + $additionalProperties + $imp
//     );
//   }
// }

@mixin propertyFactory(
  $property,
  $value,
  $additionalPropertiesPositionIsFront,
  $additionalProperties,
  $important
) {
  $imp: "";
  @if ($important and ($additionalProperties != "!important")) {
    $imp: "!important";
  }
  @if $additionalPropertiesPositionIsFront {
    #{$property}: unquote($additionalProperties + " " + $value + " " + $imp);
  } @else {
    #{$property}: unquote($value + " " + $additionalProperties + $imp);
  }
}

@mixin colorSchemeQuery(
  $property,
  $lightValue,
  $darkValue,
  $additionalPropertiesPositionIsFront: false,
  $additionalProperties: "",
  $important: false
) {
  @include propertyFactory(
    $property,
    $lightValue,
    $additionalPropertiesPositionIsFront,
    $additionalProperties,
    $important
  );
  @media (prefers-color-scheme: dark) {
    @include propertyFactory(
      $property,
      $darkValue,
      $additionalPropertiesPositionIsFront,
      $additionalProperties,
      $important
    );
  }
}

@function get-theme-color($theme, $color) {
  @if map-has-key($theme, $color) {
    @return map-get($theme, $color);
  }
  // If the key doesn't exist in the map
  @else {
    @warn "No value found for `#{$color}`. "
        + "Available colors are: #{map-keys($theme)}.";
  }
}

// use like: @include theme('color', $secondary-text-color);
@mixin theme(
  $property,
  $color,
  $forceDark: false,
  $additionalPropertiesPositionIsFront: false,
  $additionalProperties: "",
  $important: false
) {
  $isQuery: true;
  $value: "";
  @if $color == v.$lightText {
    $value: get-theme-color(dark.$theme, v.$bodyText);
    $isQuery: false;
  } @else if $color == v.$darkText {
    $value: get-theme-color(light.$theme, v.$bodyText);
    $isQuery: false;
  } @else if $color == v.$primary {
    $value: get-theme-color(light.$theme, v.$primary);
    $isQuery: false;
  } @else if $forceDark {
    $value: get-theme-color(dark.$theme, $color);
    $isQuery: false;
  }
  @if $isQuery {
    $lightValue: get-theme-color(light.$theme, $color);
    $darkValue: get-theme-color(dark.$theme, $color);
    @include colorSchemeQuery(
      $property,
      $lightValue,
      $darkValue,
      $additionalPropertiesPositionIsFront,
      $additionalProperties,
      $important
    );
  } @else {
    @include propertyFactory(
      $property,
      $value,
      $additionalPropertiesPositionIsFront,
      $additionalProperties,
      $important
    );
  }
}

@mixin theme-gradient-background($key) {
  $color: map-get(light.$theme, $key);
  background: linear-gradient(to bottom, rgba($color, 0) 0%, $color 100%);
  @media (prefers-color-scheme: dark) {
    $color: map-get(dark.$theme, $key);
    background: linear-gradient(to bottom, rgba($color, 0) 0%, $color 100%);
  }
}

@mixin thing($border: false, $forceDark: false) {
  @include theme("background-color", v.$body, $forceDark);
  @include theme("color", v.$bodyText, $forceDark);
  border-radius: v.$radius;
  @if $border {
    border: 1px solid;
  }
  @include theme("border-color", v.$line, $forceDark);
}

@mixin container($margin: false) {
  @if $margin {
    margin: v.$container-margin-vert v.$container-margin-hor;
  }
  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.14);
  padding: v.$padding;
}

@mixin push--auto {
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin input($forceDark: false, $important: false) {
  @include theme("border", v.$line, $forceDark, true, "1px solid", $important);
  padding: 8px v.$padding;
  @include theme(
    "background-color",
    v.$field,
    $forceDark,
    false,
    "",
    $important
  );
  @include theme("color", v.$bodyText, $forceDark, false, "", $important);
  border-radius: v.$radius;
  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.14);
  transition: box-shadow 0.2s cubic-bezier(0.4, 0, 1, 1),
    background 0.2s cubic-bezier(0.4, 0, 0.2, 1),
    color 0.2s cubic-bezier(0.4, 0, 0.2, 1);

  &::-webkit-input-placeholder,
  &:-moz-placeholder,
  &::-moz-placeholder,
  &:-ms-input-placeholder {
    @include theme("color", v.$placeholder, $forceDark, false, "!important");
    font-size: 14px;
    text-transform: capitalize;
    top: 1px;
    position: relative;
  }
  &:hover {
    @include theme("background-color", v.$body, $forceDark);
    @include theme("border", v.$button, $forceDark, true, "1px solid");
  }
}

@mixin _normal-button {
  @include theme("background", v.$button);
  @include theme("color", v.$body);
  @include theme("border", v.$button, false, true, "1px solid");
}

@mixin _active-button {
  @include theme("background", v.$buttonShaded80);
  @include theme("color", v.$lightText);
  @include theme("border", v.$button, false, true, "1px solid");
}

@mixin _hover-button {
  @include theme("background", v.$buttonTinted50);
  @include theme("color", v.$body);
  @include theme("border", v.$buttonTinted50, false, true, "1px solid");
  // color: #1b1b1c;
  // border-color: #1b1b1c;
  // @include theme("background", v.$buttonShaded80);
  // @include theme("color", v.$lightText);
  // @include theme("border", v.$button, false, true, "1px solid");
}

@mixin customButtonColors($baseColor) {
  background: $baseColor;
  @include theme("color", v.$lightText);
  border: 1px solid $baseColor;
  &:active {
    background: color.scale($baseColor, $lightness: -80%);
  }
  &:hover {
    background: color.scale($baseColor, $lightness: 50%);
    border: 1px solid color.scale($baseColor, $lightness: 50%);
  }
}

@mixin button($active: false, $link-as-button: false) {
  @if ($active) {
    @include _active-button();
    &:active {
      @include _normal-button();
    }
  } @else {
    @include _normal-button();
    &:active {
      @include _active-button();
    }
  }
  &:hover {
    @include _hover-button();
  }
  @if ($link-as-button) {
    display: inline-block;
    margin: 0;
    text-decoration: none;
  } @else {
    margin: v.$padding v.$padding v.$padding 0;
    &:active {
      margin: v.$padding v.$padding v.$padding 0;
    }
  }
  font-size: 14px;
  text-align: center;
  border-radius: v.$radius;
  text-transform: uppercase;
  font-weight: 700;
  height: v.$button-height;
  line-height: v.$button-height;
  padding: 0 v.$padding;

  // box-shadow: 0 2px 1.5px 0 rgba(0, 0, 0, 0.12), 0 0 4px 0 rgba(0, 0, 0, 0.12);
  // transition: box-shadow 0.2s cubic-bezier(0.4, 0, 1, 1),
  //   background 0.2s cubic-bezier(0.4, 0, 0.2, 1),
  //   color 0.2s cubic-bezier(0.4, 0, 0.2, 1);
}

// no need to use @at-root. SASS now automatically hoists keyframes.
@mixin animation-keyframes {
  $animation-name: unique-id();
  animation-name: $animation-name;

  @keyframes #{$animation_name} {
    @content;
  }
}

@mixin animation-grow($prop: width, $startVal: 0, $endVal: 100%) {
  @include animation-keyframes {
    0% {
      #{$prop}: $startVal;
    }

    100% {
      #{$prop}: $endVal;
    }
  }

  animation-delay: 0s;
  animation-duration: v.$transition;
  animation-timing-function: ease;
  animation-fill-mode: forwards;
}
